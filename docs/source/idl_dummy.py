"""
This file is automatically generated from IDL files.
"""

class veluga:
    def r_gal():
        """
        This method retrieves galaxy or halo catalog data for a given snapshot and object ID.
        
        Parameters
        ----------
        snap0 : int
        	Snapshot number
        
        id0 : int
        	Object ID. Use a negative value to retrieve all objects in the snapshot.
        
        horg: string
        	A flag to specify the object type. Galaxy for 'g' and Halo for 'h'
        	Default is 'g'
        
        
        Returns
        -------
        Structured_array
        	A structured array containing information about the objects.
        
        Examples
        --------
        IDL> g = veluga->r_gal(100, 1)
        		Read the galaxy with ID=1 at the snapshot of 100
        
        IDL> PRINT, g[0].ID
        		Print its ID
        
        IDL> h = veluga->r_gal(200, -1, horg='h')
        		Read all halos at the snapshot of 200
        
        IDL> PRINT, h[0].mvir
        		Print the virial mass of the first halo

        """
        pass

    def r_part():
        """
        This method retrieves particle information of a given galaxy or halo
        
        Parameters
        ----------
        snap0 : long
        	Snapshot number
        
        id0 : long
        	Object ID.
        
        horg: string {'h' or 'g'}
        	A flag to specify the object type. Galaxy for 'g' and Halo for 'h'
        	Default is 'g'
        
        g_simunit: boolean
        	If set (/g_simunit), return output unit as the ramses simulation unit
        
        g_ptime: boolean
        	If set (/g_ptime), retrieve physical time unit for the age of particles
        	Stored in gyr, sfact, and redsh tag
        
        
        Returns
        -------
        Structure
        	xx, yy, zz : [kpc (physical)]
        		position of particles
        	vx, vy, vz : [km/s]
        		velocity of particles
        	mp : [Msun]
        		mass of particles
        	ap : [simulation unit]
        		birth time
        	zp : []
        		metallicity
        	gyr : [Gyr]
        		birth time in Gyr (retrieved if g_ptime=True)
        	sfact: []
        		birth time in scale factor (retrieved if g_ptime=True)
        	redsh: []
        		birth time in redshift (retrieved if g_ptime=True)
        	id : []
        		Particle ID
        	domain : []
        		mpi domain number to which particles belong
        	KE : [km^2/s^2]
        		specific Kinetic energy
        		retrieved when g_potential is called
        	UE : [km^2/s^2]
        		specific Internal energy
        		retrieved when g_potential is called
        	PE : [km^2/s^2]
        		specific Potential energy
        		retrieved when g_potential is called
        
        Examples
        --------
        IDL> g = veluga->r_part(100, 1)
        		Retrieve information of the member star particle of the galaxy with ID=1 at the snapshot of 100
        
        IDL> PRINT, g[0].ID
        		Print ID of the first particle
        
        IDL> g = veluga->r_part(100, 10, horg='g', /g_ptime)
        		Retrieve information of the member star particles (including their birth time properties) that belong to the galaxy with ID=10 at the snapshot of 100
        
        IDL> h = veluga->r_gal(200, 5, horg='h')
        		Retrieve information of the member DM particle of the halo with ID=5 and snapshot=200
        
        IDL> ; extract particles with an index
        
        IDL> g = veluga->r_part(100, 10, horg='g', /g_ptime)
        
        IDL> index = WHERE(g.gyr LT 1.)
        
        IDL> g_new = veluga->g_extract(g, index)
        	Return a new structure with a given index

        """
        pass

    def r_cell():
        """
        This method retrieves cell information near a halo/galaxy given
        
        Parameters
        ----------
        snap0 : long
        	Snapshot number
        
        id0 : long
        	Object ID.
        
        dx : double
        	aperture
        
        horg: string {'h' or 'g'}
        	A flag to specify the object type. Galaxy for 'g' and Halo for 'h'
        	Default is 'g'
        
        g_simunit: boolean
        	If set (/g_simunit), return output unit as the ramses simulation unit
        
        
        
        Returns
        -------
        Structure
        	xx, yy, zz : [kpc (physical)]
        		position of cells
        	vx, vy, vz : [km/s]
        		velocity of cells
        	dx : [kpc]
        		cell size
        	level : []
        		cell AMR level
        	den : [cc]
        		density of cells
        	temp : [K/mu]
        		temperature of cells
        	zp : []
        		metallicity of cells
        	mp : [Msun]
        		mass of cells
        	KE : [km^2/s^2]
        		specific Kinetic energy
        		retrieved when g_potential is called
        	UE : [km^2/s^2]
        		specific Internal energy
        		retrieved when g_potential is called
        	PE : [km^2/s^2]
        		specific Potential energy
        		retrieved when g_potential is called
        	Chem_H, ... : []
        		chemical abundance
        	dust_N, ... : []
        		dust abundance
        
        Examples
        --------
        IDL> cell = veluga->r_cell(100L, 1L, 10.)
        		Retrieve information of the cells within a box with a length of 10 kpc centered at a galaxy
        
        IDL> PRINT, cell.xx[0]
        		Print x-coordinate of the first cell
        
        IDL> cell = veluga->r_cell(100L, 10L, 100.d, horg='h')
        		Retrieve information of the cells (within a box of length 100 kpc) for a halo (ID=10)
        
        IDL> ; extract cells with an index
        
        IDL> cell = veluga->r_cell(100, 10, horg='g')
        
        IDL> index = WHERE(cell.level GE 15L)
        
        IDL> cell_new = veluga->g_extract(cell, index)
        	Return a new structure with a given index

        """
        pass

