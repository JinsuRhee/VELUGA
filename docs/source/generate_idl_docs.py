import os

def extract_comments_from_idl(idl_file, target_functions):
    """Extracts docstring comments for specific functions from the IDL file."""
    function_docs = []
    current_function = None
    current_comment = []

    with open(idl_file, 'r', encoding='utf-8') as file:
        for line in file:
            # Check if the line defines a function
            if "FUNCTION veluga::" in line:
                # Extract the function name
                current_function = line.split("FUNCTION veluga::")[1].strip().split(",")[0]
                # Reset the current comment if the function is one of the targets
                #print(current_function)
                if current_function in target_functions:
                    current_comment = []
                else:
                    current_function = None

            if "PRO veluga::" in line:
                # Extract the function name
                current_function = line.split("PRO veluga::")[1].strip().split(",")[0]
                # Reset the current comment if the function is one of the targets
                #print(current_function)
                if current_function in target_functions:
                    current_comment = []
                else:
                    current_function = None

            # If we are processing a target function, collect comments
            if current_function and line.strip().startswith(";+"):
                current_comment.append(line.strip())

                # Continue collecting until we find the ending comment delimiter
                while True:
                    next_line = next(file, None)
                    if next_line is None or next_line.strip() == ";+":
                        if current_comment:
                            function_docs.append((current_function, "\n".join(current_comment[2:])))
                        break
                    current_comment.append(next_line.strip()[2:])

    #print(function_docs)
    return function_docs
    
def create_dummy_python_script(function_docs, output_file):
    """Creates a Python script with dummy functions and docstrings."""
    with open(output_file, 'w', encoding='utf-8') as file:
        file.write('"""\nThis file is automatically generated from IDL files.\n"""\n\n')
        file.write('class veluga:\n')
        for function_name, doc in function_docs:
            file.write("    " + f"def {function_name}():\n")
            # Indent each line of the docstring
            docstring = []
            for line in doc.strip().split('\n'):
            	docstring.append("        " + line + '\n')
            	#print("        " + line)
            #docstring = '\n'.join([line for line in doc.strip().split('\n')])
            docstring = "".join(docstring)
            #print(docstring)
            file.write(f"        \"\"\"\n{docstring}\n        \"\"\"\n")
            file.write("        pass\n\n")





def main():
    idl_file = '../../veluga__define.pro'
    target_function = ['r_gal', 'r_part', 'r_cell']
    module_name = 'idl_dummy'


    python_file = os.path.join(f"{module_name}.py")
    rst_file = os.path.join('usage/', "idl.rst")

    # Extract comments and generate Python script and RST file
    function_docs = extract_comments_from_idl(idl_file, target_function)
    create_dummy_python_script(function_docs, python_file)
    #create_rst_file(module_name, rst_file, function_docs)

if __name__ == "__main__":
    main()
